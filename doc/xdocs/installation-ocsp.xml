<?xml version="1.0"?>
<document>

  <properties>
    <title>OCSP Installation</title>
  </properties>

<body>
  <section name="OCSP Installation">
  <note>
  This section contains installation instructions for the external OCSP responder. EJBCA by default have an internal OCSP responder that works
  out of the box on the CA server. See 'OCSP Architecture' to determine if you also need an external OCSP responder.
  </note>  
  <p> Installing the external OCSP responder together with EJBCA requires configuration on the CA and installation of the 
  external OCSP responder. 
  </p><p>If you are not using the responder with EJBCA you can skip the section about building and configuring EJBCA.
  </p>
  <subsection name="Building and configuring the Responder">
<subsubsection name="General configuration">
<p>
You should first read the <a href="installation-va.html">Standalone VA installation</a> that specifies the general configuration for a VA.
</p><p>
All options for the OCSP responders OCSP behavior is set in conf/ocsp.properties. All options are documented in this file.
<br/>
The ocsp.keys.* preferences (that has no meaning for EJBCA) has also to be configured.<br/> 
If card keys (see below) should be used then the property 'ocspHardTokenClasses' must be set to the corresponding directory of PrimeCard.
</p>
</subsubsection>
<subsubsection name="Responder signing keys">
<p>
The keys used to sign the OCSP response could either be stored on as a PKCS#12 file in the file system of the host, 
on a smart card or on a PKCS#11 token. It should be one key for each CA, and the each CA the responder answers for an OCSP signing certificate must be issued.
<br/>
The certificate profile could be the same for both soft, smart card and PKCS#11 keys.
</p><p>
To issue OCSP signer certificate from EJBCA you define a new certificate profile and use 'OCSPSIGNER (FIXED)' as template (use selected as template).
<br/>This certificate profile is like a normal end entity profile but with the following key usages:
</p>
<source>
- Key Usage: Digital Signature
- Extended Key Usage: OCSPSigner
</source>
<p>
Configure the newly created certificate profile to use the OCSP publisher defined above.
You also need to create a new End Entity Profile to use the new Certificate Profile.
</p>
<p>
You should then create a user for each CA using this certificate profile. 
Use the token type "p12" or "jks" for soft keys and "user generated" for pkcs#11 and card keys.
</p>
<note>
Note: The OCSP responders certificate(s) AND the CA certificate(s) need to be published from the CA to the 
OCSP responder. For the CA you do this by setting the CRL publisher to the OCSP publisher.
</note>
<subsubsection name="Soft keystores">
<p>
When a soft key has been created it should be stored in the directory defined by the ocsp.keys.dir property of conf/ejbca.properties.
The password for each key must be the same and should be equal to the ocsp.keys.keyPassword property of conf/ejbca.properties.
</p>
<p>
Soft OCSP keystores are most easily created by adding a user to EJBCA and selecting the PKCS#12 keystores type. After this the OCSP keystore can be created
by running the <i>bin/ejbca.sh batch</i> command on the EJBCA server, or by fetching the PKCS#12 keystore from the public enrollment pages of EJBCA. 
</p>
</subsubsection>
<subsubsection name="PKCS#11 HSMs">
<p>
A PKCS#11 key and certificate is created like this (example for Thales/nCipher, change accordingly for your HSM):
</p>
<source>
ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./sunpkcs11.cfg 2048 ocsp
ejbcaClientToolBox.sh PKCS11HSMKeyTool certreq /opt/nfast/toolkits/pkcs11/libcknfast.so i1 ocsp
</source>
<p>
The certificate for the key is then fetched from the public enrollment page of EJBCA with the certificate request that was stored in the file ocsp.pem
when the "certreq" command was executed. You then have to manually create a certificate chain file. The OCSP signer certificate should be
first in this file and the root CA certificate should be last.
</p>
<p>
If the chain file is called chain.pem then the certificate chain is installed in the HSM like this:
</p>
<source>
ejbcaClientToolBox.sh PKCS11HSMKeyTool installcert /opt/nfast/toolkits/pkcs11/libcknfast.so i1 chain.pem
</source>
<p>
You must then define all ocsp.p11.* properties on the responder.
Please read <a href="adminguide.html#Generic%20PKCS#11%20provider">Generic PKCS#11 provider</a> for information on the configuration file for the generate command.
Do also try to find your HSM in <a href="adminguide.html#Hardware%20Security%20Modules%20(HSM)">Hardware Security Modules (HSM)</a>. 
Please note the only PKCS#11 HSMs are supported.
</p>
</subsubsection>
<subsubsection name="PrimeCardHSM">
<p>
Smart card keys are created on the card with the "create CA Token on card" tool see the HOWTO-CATokenOnCard.txt of PrimeCard.
Select the choice for one authentication code for all keys on the card. If you want several OCSP responders with same
keys then you may create several card with same keys. But note that no backup card is needed. If a card is lost or broken then
simply make another one with new keys and revoke the old signing certificates.
</p><p>
The certificates for the the keys are then fetched from the public enrollment page of EJBCA with the certificate request. There should be one
certificate request for each key.
</p>
<p>The command:
</p>
<source>
changePIN.sh createCertReqs
</source>
<p>will create the requests, one for each key. Choose 'pem' format for
the certificates and then just store these files in the 'ocsp.keys.dir' directory.
The property 'ocsp.keys.cardPassword' should be set to the PIN of the card.
</p>
</subsubsection>
<p>
Re-start the application server for the external OCSP responder.
When the application server is started it should just work.
</p>
</subsubsection>
</subsection>
<subsection name="Dynamic reconfiguration">
<p>
By configuring the property 'allow.external-dynamic.configuration' in conf/ejbca.properties you can have the OCSP responder re-read some 
configuration values from files in the file system. The values ocsp.untilNextUpdate and ocsp.maxAge from ocsp.properties will be re-read if you put 
an ocsp.properties file in the directory /etc/ejbca/conf or in APPSRV_HOME/bin/conf (if you start your application server from APPSRV_HOME/bin).
</p>
</subsection>
<subsection name="Key updating">
<p>
The responder might be configured (in ocsp.properties) to scan for installed keys at regular intervals. The responder will use the keys detected at the latest scan.
</p>
<p>
Please note that keys in the PKCS#11 slot will not be updated if automatic re-keying is enabled.
</p>
</subsection>
<subsection name="Re-keying">
<p>
Re-keying allows the OCSP responder to generate new signing keys and obtain a new certificate for these keys from the CA. Re-keying is configured in the ocsp.properties configuration file.
</p>
<p>
Re-keying can be either automatic or manual. Automatic re-keying allows you to specify the maximum expiration period in seconds before the re-keying should happen (i.e. you can set-up the OCSP responder to renew its keys and certificates when its current certificate is about to expire). Manual re-keying allows you to trigger the renewal by sending a GET request to the OCSP responder (with the necessary parameters). Manual re-keying is useful when a greater control on re-keying periods is desired. Since manual re-keying can be done with external tools (like wget or curl), cron jobs can be set-up to trigger it at the desired time.
</p>
<p>
Both automatic and manual re-keying require that EJBCA CA web-service URL is defined. The web-service URL should point to the EJBCA CA server which has issued the certificates for the OCSP responder. If the URL is not defined, the re-keying won't be enabled.
</p>
<p>
OCSP responder acts as a registration authority when renewing keys with the EJBCA CA. OCSP responder can use either a soft keystore, or an HSM for authenticating with CA. If soft keystore is used, it needs to be provided in the Java keystore format (jks), and its location and password should be defined in the ocsp.properties configuration file. If HSM is used for the authentication, the soft keystore options should not be specified, and the re-keying function will instead use the private key from the configured P11 slot (the private key from HSM slot is selected by first locating the corresponding certificate in the slot with the necessary key usage and extended key usage as outlined below).
</p>
<p>
Since OCSP responder is acting as a registration authority, its certificate for authenticating to the EJBCA CA web-service must have the key usage set to "Digital Signature" and extended key usage set to "Client Authentication". It is also necessary to set-up the appropriate access rules on the CA side (either by creating a new RA role, or using an existing one). The role for the OCSP responder should have the right to view and edit the end entities (at least for all of the CA's issuing the certificates for the OCSP responder, as well as for certificate profiles used by the OCSP responder's certificates).
</p>
<p>
For manual re-keying the GET request should contain the parameters "renewSigner" and "password". The "renewSigner" parameter can be used to specify which OCSP keys should be renewed. It can be either set to "all", which will renew all of the OCSP signer keys, or to a specific OCSP responder certificate subject DN (unlike the default responder options, the parameter specified here should be the OCSP's subject DN, not the issuer's). Password should be configured in the ocsp.properties file. If the password is not set, manual re-keying will not be enabled.
</p>
<p>
Manual re-keying can further be limitted by specifying the allowed originating IP addresses for the requests. By default the re-keying is allowed only from the localhost (127.0.0.1) address. Allowed IP addresses are configured in the ocsp.properties configuration file, and multiple addresses can be provided by separating them with a semicolon (;).
</p>
<p>
The following two examples demonstrate the manual triggering of re-keying on the OCSP responder. The first example triggers the re-keying for all of the OCSP signer keys, while the second one will trigger rekeying for a specific signer (the one matching the subject DN of "CN=OCSP REsponder 123,O=PrimeKey Solutions AB,C=SE"):
</p>
<source>
wget http://va.example.com:8080/ejbca/publicweb/status/ocsp?renewSigner=all\&amp;password=foobar123
wget http://va.example.com:8080/ejbca/publicweb/status/ocsp?renewSigner=CN=OCSP\ Responder\ 123,\ O=PrimeKey\ Solutions\ AB,\ C=SE\&amp;password=foobar123
</source>
<p>
If a specific OCSP subject DN is provided, the OCSP responder will look amongst its keystores/HSM slots for matching certificate and its associated keys. If the specified subject DN is not found, an ERROR message will be output to the server log files specifying the searched subject DN and the available subject DN's. If you're having problems with manual re-keying when providing a specific subject DN, make sure to check the logs and verify that the proper subject DN was specified for the "renewSigner" parameter. Ordering of subject components matters. You can also copy/paste the subject DN from the log to make sure the spelling and ordering is right (i.e. that it matches with what can be found on-disk or in HSM).
</p>
<p>
For re-keying to work, the OCSP signer certificaes need to be issued to separate end entities on the EJBCA ca (i.e. you can't re-use the same end entity for multiple OCSP signer certificates for different CA's).
</p>
<p>
When testing the automatic re-keying it is desirable to set the maximum expiration time to be as short as possible. This can be achieved by setting it to a value that's close to the validity time of the OCSP certificate. For example, in case the validity of OCSP certificate is 730 days, the ocsp.rekeying.renewTimeBeforeCertExpiresInSeconds value should be set to (730*24*60-14)*60 = 63071160 seconds. This will force re-keying to happen every 4th minute (EJBCA issues certificates which are valid 10 minutes before they were issued in order to compensate for clock inaccuracies in systems using the certificates).
</p>
<p>
Be aware that the re-keying operation has not been tested on all of the application servers. Some of the application servers may have problematic client web-service implementations. The following application servers have been tested and confirmed to work as expected for OCSP signer re-keying:
<ol>
<li>JBoss 5.1.0.GA (jdk6)</li>
<li>JBoss EAP 5.1.2</li>
<li>JBoss 6.1.0.Final</li>
</ol>
</p>
</subsection>
<subsection name="No password in memory">
<p>
With this feature enabled no password are kept in memory. If it is enabled you must not define any passwords in ocsp.properties.
</p>
<p>
Defining this feature makes it impossible to do "key updating".
</p>
</subsection>
<subsection name="Several responders using same HSM">
<p>
If several responders should share the same HSM and rekeying should be enabled on all of them then each responder must use different keys.
To be able to define this set of keys that should be used there is a property called 'ocsp.rekeying.listOfAliases' in the ocsp.properties file.
</p>
</subsection>
</section>

<section name="Error handling">
<p>
If there is an error publishing to the OCSP database, the OCSP responder will be out of sync with the CA.
It is very important to re-synchronize the databases in that case. Read about error handling and synchronization of the database in the <a href="installation-va.html#Error%20handling">VA installation</a> guide.
</p>
  
  </section>

  <section name="Running several responders">
  <p>
Additional OCSP DataSources for OCSP responders have to be added manually. The easiest way to do this
on JBoss is to clone the initially deployed OCSP DataSource JBOSS_HOME/server/default/deploy/ocsp-ds.xml
to JBOSS_HOME/server/default/deploy/ocsp2-ds.xml and change 
  </p>
<source>
      &lt;jndi-name>OcspDS&lt;/jndi-name>
      &lt;connection-url>jdbc:mysql://ocsp1.domain.org:3306/ejbca&lt;/connection-url>
</source>
  <p>to</p>
<source>
      &lt;jndi-name>Ocsp2DS&lt;/jndi-name>
      &lt;connection-url>jdbc:mysql://ocsp2.domain.org:3306/ejbca&lt;/connection-url>
</source>
  <p>
and configure an additional publisher to use this new DataSource 'java:/Ocsp2DS'.
  </p>
  <p>
An alternative approach for MySQL users is to use the tools for database replication. Either you could
replicate CertificateData from you master EJBCA database to slave-responders or you could publish
to a master OCSP responders database that in turn is replicated to the other responders. How to do it
is described in the mysql documentation. Depending on which which version you are using please read one
of the followings: <a href="http://dev.mysql.com/doc/refman/5.0/en/replication-howto.html">MySQL 5.0 Replication Howto</a> 
<a href="http://dev.mysql.com/doc/refman/5.1/en/replication-howto.html">MySQL 5.1 Replication Howto</a>
  </p>
  </section>


  <section name="Adding additional responders in a live environment">
  <p>
  There is no automated way of pushing all the certificates that has been published to
  existing OCSP responders. To duplicate an existing "source" OCSP database to a "target" OCSP database: 
  </p>
  <ol>
    <li>To create the tables in the target OCSP, start JBoss AS with OCSP deployed for the first time (and then stop the server before doing the next step).</li>
    <li>Add an additional DataSource for the target OCSP responder in EJBCA.</li>
    <li>Configure a new ValidationAuthorityPublisher in EJCBA that uses the target OCSP DataSource. Chose to only publish to queue to accumulate all changes during the cloning.</li>
    <li>Wait one hour and check that there is nothing in the publisher-queue of the source OCSP that is older than one hour.</li>
    <li>Do a MySQL dump from the source database to the target database or use the ClientToolBox DBCOPY-command.</li>
    <li>When the copy operation has finished, configure a new Republisher Service for the target's OCSP Publisher.</li>
    <li>Make sure that the queue that built up during the copy operation is now published to the target OCSP.</li>
    <li>Run the monitoring tool (ClientToolBox OCSPMon) to verify that the new OCSP is in sync.</li>
    <li>Start the new OCSP node and add it to the pool of OCSPs in your load balancer.</li>
  </ol>
  </section>


  <section name="Audit and Account Logging">
  <p>
There are three types of logs that can be generated by the OCSP responder.
</p><p>
<b>1.</b> The OCSP <i>service logs</i> using Log4j to the JBoss server.log. The JBoss server log is located in 
JBOSS_HOME/server/default/log/server.log and the logging is configured in JBOSS_HOME/server/default/conf/jboss-log4j.xml.
</p><p>
<b>2.</b> The OCSP <i>transaction log</i> can be used to log various information about ocsp-requests.
Transaction logging logs summary lines for all OCSP request/responses, which can be used for charging clients if you are running a commercial OCSP service.
<br/>To turn on transaction logs logs, copy ocsp.properties.sample to ocsp.properties and change:
</p>
<source>
#ocsp.trx-log = false
</source>
<p>to</p>
<source>
ocsp.trx-log = true
</source>
<p>
then uncomment the other lines below that starts with ocsp.trx-log.
Change the ocsp.trx-log-log-date line if you want to change how the time recorded in logging should be output.
The value should be on the same format as for javas DateFormat, information on valid configurations can be found <a href="http://javatechniques.com/blog/dateformat-and-simpledateformat-examples/">here</a>.
</p>
<source>
ocsp.trx-log-log-date = yyyy-MM-dd:HH:mm:ss
</source>
<p>
ocsp.trx-log-pattern is a pattern for use with ocsp.audit-order to replace constants with values during logging
For most purposes you will not need to change this string.
</p><p> 
Use ocsp.trx-log-order to specify what information should be logged and in what order. You can also configure what characters you want in between.
If you want your log to display all of the values available you only have to un-comment it. 
</p><p>
Available values for the transaction log are:</p><p>
LOG_ID, An integer identifying that starts from 1 and is increased for every received request.<br/>
SESSION_ID A random 32 Byte long String generated when the OCSP-responder is started.<br/>
STATUS, The status of the OCSP-Request. SUCCESSFUL = 0;MALFORMED_REQUEST = 1;INTERNAL_ERROR = 2;TRY_LATER = 3;SIG_REQUIRED = 5;UNAUTHORIZED = 6;<br/>
CLIENT_IP, IP of the client making the request.<br/>
REQ_NAME, The Common Name (CN) of the client making the request.<br/>
SIGN_ISSUER_NAME_DN, DN of the issuer of the certificate used to sign the request.<br/>
SIGN_SUBJECT_NAME, Subject Name of the certificate used to sign the request.<br/>
SIGN_SERIAL_NO, Certificate serial number of the certificate used to sign the request.<br/>
NUM_CERT_ID, The number of certificates to check revocation status for.<br/>
ISSUER_NAME_DN, The subject DN of the issuer of a requested certificate.<br/>
ISSUER_NAME_HASH, MD5 hash of the issuer DN.<br/>
ISSUER_KEY, The public key of the issuer of a requested certificate.<br/>
DIGEST_ALGOR, Algorithm used by requested certificate to hash issuer key and issuer name.<br/>
SERIAL_NO, Serial number of the a requested certificate.<br/>
CERT_STATUS, The requested certificate revocation status.<br/>
REPLY_TIME, The time measured between when the request is received by the responder and when the response is sent. This time includes the time it takes to read the request bytes.<br/>
PROCESS_TIME, The time measured between when the request has been read by the responder and when the response is sent. This time starts after the request bytes have been read.<br/>
</p><p>
<b>3.</b> The OCSP <i>audit log</i> logs entire requests and responses. This can be useful when requests and responses are signed because the information can be used 
to verify requests and responses afterwards.
Audit logging is configured in the same way as transaction logging.
<br/>Valid values for audit logging are:</p><p>
LOG_ID, An integer identifying that starts from 1 and is increased for every received request.<br/>
SESSION_ID A random 32 Byte long String generated when the OCSP-responder is started.<br/>
OCSPREQUEST, The (hex encoded) byte[] ocsp-request that came with the http-request.<br/>
OCSPRESPONSE, The (hex encoded) byte[] ocsp-response that was included in the http-response.<br/>
</p><p>
Note that LOG_ID are of the same value in both trx log and audit log for any request. This means they can be cross referenced.
You can retrieve information from the transaction log and verify that the information is valid by using the audit Log.
  </p>
  
  <subsection name="Configuring output files for OCSP logging">
  <p>
For JBoss you can configure JBOSS_HOME/server/default/conf/jboss-log4j.xml to put the transaction and audit logs in separate files.
  </p>
  <source>
   &lt;appender name="OCSPTRANSACTION" class="org.jboss.logging.appender.RollingFileAppender">
     &lt;errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
     &lt;param name="File" value="${jboss.server.log.dir}/transactions.log"/>
     &lt;param name="Append" value="false"/>
     &lt;param name="MaxFileSize" value="500KB"/>
     &lt;param name="MaxBackupIndex" value="1"/>
     &lt;layout class="org.apache.log4j.PatternLayout">
       &lt;param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
     &lt;/layout>	    
   &lt;/appender>

   &lt;appender name="OCSPAUDIT" class="org.jboss.logging.appender.RollingFileAppender">
     &lt;errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
     &lt;param name="File" value="${jboss.server.log.dir}/audit.log"/>
     &lt;param name="Append" value="false"/>
     &lt;param name="MaxFileSize" value="500KB"/>
     &lt;param name="MaxBackupIndex" value="1"/>
     &lt;layout class="org.apache.log4j.PatternLayout">
       &lt;param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
     &lt;/layout>	    
   &lt;/appender>

   &lt;category name="org.ejbca.core.protocol.ocsp.TransactionLogger">
         &lt;priority value="DEBUG"/>
         &lt;appender-ref ref="OCSPTRANSACTION"/>
   &lt;/category>

   &lt;category name="org.ejbca.core.protocol.ocsp.AuditLogger">
         &lt;priority value="DEBUG"/>
         &lt;appender-ref ref="OCSPAUDIT"/>
   &lt;/category>   
  </source>
  <p>
For other application servers you can configure conf/log4j-<i>appserver</i>.xml.
  </p>
  </subsection>

  <subsection name="Safer Log4j Logging">
  <p>
The default behavior when logging fails, such as when the destination disk is full or disconnected, is to continue responding as normal.
If you prefer the responder not to send OCSP-responses when logging fails you can use the following configuration:
</p><p>
<b>1.</b> From your EJBCA folder, run:
</p>
<source>
ant jbosslog4jsafer
</source>
<p> 
<b>2.</b> Copy jbosslog4jsafer.jar from the dist directory to your JBoss Servers lib directory. For example:
</p>
<source>
cp dist/jbosslog4jsafer.jar /home/jboss/jboss-4.2.2.GA/server/default/lib/
</source>
<p>
<b>3.</b> Set  'ocsp.log-safer = true' in ocsp.properties
</p><p>
<b>4.</b> Modify your jboss-log4j.xml file to use the SaferDailyRollingFileAppender and ProbeableErrorHandler. For example:
</p>
<source>
	&lt;appender name="OCSPTRANSACTION" class="org.ejbca.appserver.jboss.SaferDailyRollingFileAppender">
		&lt;errorHandler class="org.ejbca.appserver.jboss.ProbeableErrorHandler" />
		&lt;param name="File" value="${jboss.server.log.dir}/transactions.log" />
		&lt;param name="Append" value="true" />
		
        &lt;!-- Rollover at midnight each day -->
		&lt;param name="DatePattern" value="'.'yyyy-MM-dd" />
		&lt;layout class="org.apache.log4j.PatternLayout">
            &lt;!-- The default pattern: Date Priority [Category] Message\n -->
			&lt;param name="ConversionPattern" value="%d %-5p [%c] %m%n" />
		&lt;/layout>
	&lt;/appender>
	&lt;appender name="OCSPAUDIT" class="org.ejbca.appserver.jboss.SaferDailyRollingFileAppender">
		&lt;errorHandler class="org.ejbca.appserver.jboss.ProbeableErrorHandler" />
		&lt;param name="File" value="${jboss.server.log.dir}/audit.log" />
		&lt;param name="Append" value="true" />

        &lt;!-- Rollover at midnight each day -->
		&lt;param name="DatePattern" value="'.'yyyy-MM-dd" />
		&lt;layout class="org.apache.log4j.PatternLayout">
            &lt;!-- The default pattern: Date Priority [Category] Message\n -->
			&lt;param name="ConversionPattern" value="%d %-5p [%c] %m%n" />
		&lt;/layout>
	&lt;/appender>
	
	&lt;logger name="org.ejbca.core.protocol.ocsp.TransactionLogger">
		&lt;level value="DEBUG" />
		&lt;appender-ref ref="OCSPTRANSACTION" />
	&lt;/logger>
	&lt;logger name="org.ejbca.core.protocol.ocsp.AuditLogger">
		&lt;level value="DEBUG" />
		&lt;appender-ref ref="OCSPAUDIT" />
	&lt;/logger>  
</source>
<p>
If you use category instead of logger Log4j will output warnings on startup
</p><p>
<b>5.</b> Start JBoss and you are ready.
</p>
</subsection>
  </section>

  <section name="Setting up the Unid-Fnr OCSP extension">
  <note>If you don't know what a Unid-Fnr mapping is, you are probably not interested in this part.
  </note>
  <p>
  The Unid functionality is described in a separate <a href="unid.html">document</a>. 
  </p>
  </section>

  <section name="OCSP GET">
  <p>
The GET OCSP request is defined in <a href="http://www.ietf.org/rfc/rfc2560.txt">RFC 2560</a> A.1.1 as: <code>'GET {url}/{url-encoding of base-64 encoding
of the DER encoding of the OCSPRequest}'</code>. A base64-encoded request can contain the reserved
characters '+', '/' and '=', but will be handled correctly both in their %-escaped and original form
by the responder, since it's unclear if they do conflict as defined in <a href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</a> 2.2. 
  </p><p>
Not all web-product handles the encoded '/' (%2F) nicely. JBoss/Tomcat has to be started with
<code>-Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true</code> added to JAVA_OPT in
JBOSS_HOME/bin/run.conf. On Glassfish this JVM option is configured under Application Server Settings.
  </p>
  </section>

  <section name="Responses with longer validity and caching">
  <p>
<a href="http://www.ietf.org/rfc/rfc2560.txt">RFC 2560</a> defines thisUpdate, nextUpdate and producedAt. producedAt is always
included in the response and is the time the response was created.
thisUpdate and nextUpdate is enabled by configuring 'ocsp.untilNextUpdate' in
ocsp.properties. thisUpdate will be the time a singleResponse is embedded in
the main response and nextUpdate will be 'untilNextUpdate' seconds later than
thisUpdate. This enables clients that supports this feature to re-use a valid
response and decrease to load on the OCSP-responder.
  </p><p>
<a href="http://www.ietf.org/rfc/rfc5019.txt">RFC 5019</a> defines how to use HTTP
cache headers as defined in <a href="http://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a> for
OCSP HTTP GET requests. By using the headers Last-Modified, Expires, max-age
and Date, less intelligent nextwork component like HTTP caches can cache
respones. This enables re-use of responses to decrease the load on the
OCSP-responder and can shorten reponse times by deploying caches closer to the
actual OCSP consumers. HTTP cache headers is enabled by configuring configuring
'ocsp.maxAge' in ocsp.properties
  </p><p>
When using RFC 5019 style HTTP headers, JBoss users should be aware that the
Date header is overwritten with a cached value. Since generating the
Date-string is computationally heavy for regular small GET requests, it is
generated about once per second. So a response will have a Last-Modified that
is one second in the future from Date from time to time.
  </p><p>
A regular Apache HTTP server can be used for caching requests, load-balancing
and dropping some unwanted requests:
  </p>
  <source>
&lt;VirtualHost *:80>
        # Use as much memory as possible for the cache (in 1 kB blocks)
        # 1GB of memory at ~2kB/ocsp request would hold about 500000 different requests
        CacheEnable mem /
        MCacheSize 1048576
        MCacheMaxObjectCount 1000000
        MCacheMinObjectSize 1
        MCacheMaxObjectSize 4096

        # Using disk-cache will allow a much larger pool of cached entires and the operation system
        # will cache those files, but you are responsible for cleaning up old cache-entries using
        # the "htcacheclean" tool. A disk cache will also live through a server restart.
        # The user running apache has to have read/write access to "/var/cache/ocsp".
        #CacheEnable disk /
        #CacheRoot /var/cache/ocsp

        # Ignore requests for uncached responses.. this will protect the OCSP from
        # DOS attacks using "Cache-Control: no-cache" or "Pragma: no-cache"
        CacheIgnoreCacheControl On

        ProxyRequests Off

        &lt;Location>
                # Everybody is welcome here..
                Allow from all
                Order allow,deny

                # ..or just those from networks that is supposed to use the service
                #Deny from all
                #Order deny,allow
                #allow from 127.
                #allow from 172.16.212.1

                ProxyPassReverse balancer://mycluster-kerb/
        &lt;/Location>

        # Proxy requests to OCSP instances (only one machine currently configured)
        &lt;Proxy balancer://mycluster-kerb>
                # proxy_ajp has to be enabled for ajp-proxying
                BalancerMember ajp://127.0.0.1:8009/ejbca/publicweb/status/ocsp
                # proxy_http has to be enabled for http-proxying
                #BalancerMember http://ocsp2.domain.org:8080/ejbca/publicweb/status/ocsp
                #BalancerMember http://ocsp3.domain.org:8080/ejbca/publicweb/status/ocsp
        &lt;/Proxy>

        # We only want RFC 5019 compliant URLs to be forwarded to the OCSP, the rest
        # should get a "404 Not found" or "414 Request-URI Too Large."
        LimitRequestLine 257
        RewriteEngine On
        RewriteCond %{REQUEST_METHOD} get [NC]
        RewriteRule ^/([a-zA-Z0-9+=/]+)$ balancer://mycluster-kerb/$1 [P,L]

        # Possible values include: debug, info, notice, warn, error, crit,
        # alert, emerg.
        LogLevel debug
        CustomLog /var/log/apache2/access.log combined
        ErrorLog /var/log/apache2/error.log
&lt;/VirtualHost>
  </source>  
  </section>

</body>
</document>

