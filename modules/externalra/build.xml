<?xml version="1.0" encoding="UTF-8"?>
<project name="externalra" default="build">
    <description>
            The EJBCA External RA service
    </description>

	<dirname property="this.dir" file="${ant.file.externalra}"/>
	<import file="${this.dir}/../build.xml"/>
	
	<property name="build.dir" location="${this.dir}/build"/>
	<property name="build-test.dir" location="${this.dir}/build-test"/>
	<property name="src.dir" location="${this.dir}/src"/>
	<property name="src-test.dir" location="${this.dir}/src-test"/>
	<property name="reports.base.dir" location="${this.dir}/build-test/reports/"/>

	<path id="compile-service.classpath">
		<path refid="lib.jee.classpath"/>
		<path refid="lib.ejbca-common-web.classpath"/>
	</path>

	<path id="compile-client.classpath">
		<path refid="lib.jpa.classpath"/>
		<path refid="lib.cert-cvc.classpath"/>
		<path refid="lib.bouncycastle.classpath"/>
		<path refid="lib.ejbca-util.classpath"/>
		<path refid="lib.log4j.classpath"/>
		<path refid="lib.commons-logging.classpath"/>
		<path refid="lib.commons-lang.classpath"/>
		<path refid="lib.commons-config.classpath"/>
		<path refid="lib.commons-collections.classpath"/>
	</path>

	<path id="compile.classpath">
		<path refid="compile-client.classpath"/>
		<path refid="compile-service.classpath"/>
	</path>

	<path id="test.classpath">
		<path location="${build-test.dir}" />
		<path location="${mod.externalra-cli.lib}" />
		<path refid="compile.classpath"/>
		<path refid="lib.junit.classpath"/>
	</path>

    <target name="build" description="Build this module" depends="build-service, build-client"/>

    <target name="build-service" description="Build External RA service" depends="compile, setup-database-mapping-files">
    	<dirname file="${mod.externalra-service.lib}" property="mod.externalra-service.lib.dir"/>
    	<mkdir dir="${mod.externalra-service.lib.dir}" />
    	<jar destfile="${mod.externalra-service.lib}">
   			<fileset dir="${build.dir}">
                <include name="org/ejbca/extra/caservice/**/*.class" />
                <include name="org/ejbca/extra/util/**/*.class" />
                <include name="org/ejbca/extra/db/**/*.class" />
    		</fileset>
   			<fileset dir="${build.dir}" includes="META-INF/*.xml"/>
    	</jar>
    </target>

    <target name="build-library" description="Build External RA client library" depends="compile-client">
    	<dirname file="${mod.externalra.lib}" property="mod.externalra.lib.dir"/>
    	<mkdir dir="${mod.externalra.lib.dir}" />
    	<jar destfile="${mod.externalra.lib}">
   			<fileset dir="${build.dir}">
                <include name="org/ejbca/extra/db/*.class" />
                <include name="org/ejbca/extra/util/*.class" />
    		</fileset>
    	</jar>
    	
    </target>

    <target name="build-client" description="Build External RA CLI" depends="compile-client">
    	<dirname file="${mod.externalra-cli.lib}" property="mod.externalra-cli.lib.dir"/>
    	<mkdir dir="${mod.externalra-cli.lib.dir}/lib" />
    	<mkdir dir="${mod.externalra-cli.lib.dir}/endorsed" />
    	<pathconvert property="lib.compile-client.classpath.property" pathsep=" ">
    	    <path refid="compile-client.classpath" />
    		<map from="${ejbca.home}/" to=""/>
    	</pathconvert>
    	<copy todir="${mod.externalra-cli.lib.dir}/lib" flatten="true">
    		<fileset dir="${ejbca.home}" includes="${lib.compile-client.classpath.property}"/>
    	</copy>
    	<pathconvert property="externalra-cli.dependencies" pathsep=" ">
    	    <path>
	        	<fileset dir="${mod.externalra-cli.lib.dir}" includes="lib/*.jar"/>
    	    </path>
    		<map from="${mod.externalra-cli.dist}/" to=""/>
    	</pathconvert>
    	<jar destfile="${mod.externalra-cli.lib}">
    		<manifest>
    			<attribute name="Class-path" value="${externalra-cli.dependencies} ./" />
    			<attribute name="Main-Class" value="org.ejbca.extra.ra.ExtRATestClient"/>
    		</manifest>
   			<fileset dir="${build.dir}">
                <include name="org/ejbca/extra/db/*.class" />
                <include name="org/ejbca/extra/ra/*.class" />
                <include name="org/ejbca/extra/util/*.class" />
    		</fileset>
    	</jar>
        <copy file="${log4j.cli.file}" tofile="${mod.externalra-cli.lib.dir}/log4j.xml" failonerror="true"/>
        <copy file="${this.dir}/resources/externalra-cli.sh" todir="${mod.externalra-cli.lib.dir}" failonerror="true"/>
        <copy file="${this.dir}/resources/README" todir="${mod.externalra-cli.lib.dir}" failonerror="true"/>
    	<chmod perm="a+rx" file="${mod.externalra-cli.lib.dir}/externalra-cli.sh"/>
    	<copy tofile="${mod.externalra-cli.lib.dir}/META-INF/persistence.xml" file="${this.dir}/resources/persistence.cli.xml" overwrite="true"/>
    </target>

    <target name="clean" description="Clean up this module">
		<delete dir="${build.dir}" />
		<delete dir="${build-test.dir}" />
		<delete dir="${mod.externalra-cli.path}" />
		<delete file="${mod.externalra-service.lib}" />
    </target>
	
    <target name="compile-external-deps" unless="external-deps-satfisfied"><antcall target="ejbca-common-web"/></target>
    <target name="compile" depends="compile-external-deps">
    	<mkdir dir="${build.dir}" />
        <javac srcdir="${src.dir}" destdir="${build.dir}" debug="on" includeantruntime="no"
        	encoding="iso8859-1" target="${java.target.version}" classpathref="compile.classpath"/>
    </target>

    <target name="compile-client-external-deps" unless="external-deps-satfisfied"><antcall target="ejbca-util"/></target>
    <target name="compile-client" depends="compile-client-external-deps">
    	<mkdir dir="${build.dir}" />
        <javac srcdir="${src.dir}" destdir="${build.dir}" debug="on" includeantruntime="no"
        	encoding="iso8859-1" target="${java.target.version}" classpathref="compile.classpath">
            <include name="org/ejbca/extra/db/*.java" />
            <include name="org/ejbca/extra/ra/*.java" />
            <include name="org/ejbca/extra/util/*.java" />
       	</javac>
    </target>

    <target name="compile-tests" depends="build">
    	<mkdir dir="${build-test.dir}" />
        <javac srcdir="${src-test.dir}" destdir="${build-test.dir}" debug="on" includeantruntime="no"
        	encoding="iso8859-1" target="${java.target.version}">
        	<classpath>
				<path location="${mod.ejbca-ejb.lib}" />
        		<path refid="test.classpath"/>
        	</classpath>
    	</javac>
        <copy file="${this.dir}/resources/persistence.test.xml" tofile="${build-test.dir}/META-INF/persistence.xml" failonerror="true" overwrite="true"/>
        <copy file="${log4j.test.file}" tofile="${build-test.dir}/log4j.xml" failonerror="true"/>
    </target>

	<target name="test" depends="compile-tests" description="Run tests for this module">
		<fail message="Specify a JDBC connector JAR using -Dexternalra.test.jdbcjar=... and configure the database connection in ${this.dir}/resources/persistence.test.xml" unless="externalra.test.jdbcjar"/>
    	<antcall target="showtime"/>
    	<property name="reports.dir" location="${reports.base.dir}/test"/>
		<delete dir="${reports.dir}" />
		<mkdir dir="${reports.dir}/html"/>
		<junit printsummary="yes" haltonfailure="no" dir="${this.dir}">
			<classpath>
        		<path refid="test.classpath"/>
        		<path location="${externalra.test.jdbcjar}"/>
				<pathelement path="${clover.jar}"/>
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${build-test.dir}" includes="**/*Test.class">
				</fileset>
			</batchtest>
		</junit>
		<antcall target="createreport"/>
    	<antcall target="showtime"/>
    </target>
	
	<target name="runone" depends="compile-tests">
		<fail message="'test.runone' is not set. Example -Dtest.runone=ExtRAMessagesTest" unless="test.runone" />
		<fail message="Specify a JDBC connector JAR using -Dexternalra.test.jdbcjar=... and configure the database connection in ${this.dir}/resources/persistence.test.xml" unless="externalra.test.jdbcjar"/>
    	<property name="reports.dir" location="${reports.base.dir}/runone"/>
		<delete dir="${reports.dir}" />
		<mkdir dir="${reports.dir}/html"/>
		<junit printsummary="yes" haltonfailure="no" >
			<classpath>
        		<path refid="test.classpath"/>
        		<path location="${externalra.test.jdbcjar}"/>
				<pathelement path="${clover.jar}"/>
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${build-test.dir}">
					<include name="**/${test.runone}.class" />
				</fileset>
			</batchtest>
		</junit>
		<antcall target="createreport"/>
	</target>
	
    <target name="setup-database-mapping-files" >
    	<fail message="Java version ${ant.java.version} cannot be used for building this module.">
    		<condition><equals arg1="${ant.java.version}" arg2="1.5"/></condition>
    	</fail>
    	<copy tofile="${build.dir}/META-INF/persistence.xml" file="${this.dir}/resources/persistence.xml.template" overwrite="true"/>
		<script language="javascript"><![CDATA[
    	    for (i=1; i<=25; i++) {
				project.setProperty("number", i);
				jdbcUrl = project.getProperty("externalra.source-"+i+".jdbc-url");
				username = project.getProperty("externalra.source-"+i+".username");
				password = project.getProperty("externalra.source-"+i+".password");
				if (jdbcUrl != null && jdbcUrl.length()>0 && username != null && username.length()>0 && password != null) {
					project.setProperty("jdbcurl", jdbcUrl);
					project.setProperty("username", username);
					project.setProperty("password", password);
					antcall = project.createTask("antcall");
					antcall.setTarget("setup-database-mapping-file");
					try {
						antcall.perform();
					} catch (e) {
						self.log(e.message);
					}
				}
			}]]>
		</script>
    	<copy todir="${mod.externalra-datasources.dist}"><fileset dir="${build.dir}" includes="ramessage*-ds.xml"/></copy>
    </target>
	
    <target name="setup-database-mapping-file" >
    	<!-- See https://www.hibernate.org/hib_docs/v3/api/org/hibernate/dialect/package-summary.html -->
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect"><matches pattern="jdbc:mysql:" string="${jdbcurl}"/></condition>
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect"><matches pattern="jdbc:postgresql:" string="${jdbcurl}"/></condition>
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect"><matches pattern="jdbc:hsqldb:" string="${jdbcurl}"/></condition>
    	<condition property="driver-class" value="com.mysql.jdbc.Driver"><matches pattern="jdbc:mysql:" string="${jdbcurl}"/></condition>
    	<condition property="driver-class" value="org.postgresql.Driver"><matches pattern="jdbc:postgresql:" string="${jdbcurl}"/></condition>
    	<condition property="driver-class" value="org.hsqldb.jdbcDriver"><matches pattern="jdbc:hsqldb:" string="${jdbcurl}"/></condition>
    	<fail message="Unsupported database with JDBC URL '${jdbcurl}'." unless="driver-class"/>
    	<loadfile property="test" srcfile="${this.dir}/resources/persistence-unit.template">
    		<filterchain>
				<expandproperties/>
    		</filterchain>
    	</loadfile>
    	<copy tofile="${build.dir}/META-INF/persistence.xml.template" file="${build.dir}/META-INF/persistence.xml" overwrite="true"/>
    	<copy tofile="${build.dir}/META-INF/persistence.xml" file="${build.dir}/META-INF/persistence.xml.template" overwrite="true">
    		<filterchain>
    			<tokenfilter>
    				<replacestring from="&lt;!-- @next@ --&gt;" to="${test}"/>
    			</tokenfilter>
    		</filterchain>
    	</copy>
    	<delete file="${build.dir}/META-INF/persistence.xml.template"/>
    	<copy tofile="${build.dir}/ramessage${number}-ds.xml" file="${this.dir}/resources/ramessage-ds.xml" overwrite="true">
    		<filterchain>
    			<expandproperties/>
    		</filterchain>
    	</copy>
    </target>

</project>
