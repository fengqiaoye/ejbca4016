<?xml version="1.0" encoding="UTF-8"?>
<project name="systemtests" default="build" basedir=".">
    <description>
            This module contains all system tests that require a running application server.
    </description>
	
	<dirname property="this.dir" file="${ant.file.systemtests}"/>
	<import file="${this.dir}/../build.xml"/>
	
	<property name="build.dir" location="${this.dir}/build"/>
	<property name="src.dir" location="${this.dir}/src"/>
	<property name="reports.base.dir" location="${this.dir}/build/reports/"/>
	
	<!-- When running WS tests we don't want the JEE classes of the appserver, ws should be independent of that,
	     and in the case of JBoss 6 it pulls in apache cxf that does not work with client certificates, at least the same way as sun ws does -->
	<path id="systemtests.classpath.nojee">
		<path refid="lib.servlet.classpath"/>
		<path refid="lib.mail.classpath"/>
		<path refid="lib.junit.classpath"/>
		<path refid="lib.utils.classpath"/>
		<path refid="lib.jpa.classpath"/>
		<path refid="lib.bouncycastle.classpath"/>
		<path refid="lib.ldap.classpath"/>	<!-- TestPublisher uses this -->
		<path refid="lib.xmlsec.classpath"/>	<!-- To parse XML Exceptions and for XKMS (includes XML libs)-->
		<path refid="lib.idn.classpath"/>	<!-- Use by XKMS -->
		<path refid="lib.commons-logging.classpath"/>
		<pathelement location="${mod.ejbca-ejb-interface.lib}"/>
		<pathelement location="${mod.ejbca-entity.lib}"/>
		<pathelement location="${mod.ejbca-ws-cli.lib}"/>
		<pathelement location="${mod.ejbca-ws-ejb.jar}"/>
		<pathelement location="${mod.ejbca-xkms-cli.lib}"/>
		<pathelement location="${mod.clientToolBox.lib}"/>
		<pathelement location="${mod.ejbca-ejb-cli.lib}"/>
		<pathelement location="${mod.ejbca-util.lib}"/>
		<pathelement location="${mod.ejbca-common-web.lib}"/>
		<pathelement location="${mod.ejbca-ejb.lib}"/>
		<pathelement location="${mysql.lib}"/>
	</path>

	<path id="systemtests.classpath">
		<path refid="systemtests.classpath.nojee"/>
		<path refid="lib.jee.classpath"/>
	</path>

    <target name="build" description="Build this module" depends="compile"/>

    <target name="clean" description="Clean up this module">
		<delete dir="${build.dir}" />
		<delete dir="${this.dir}/reports" />
    </target>

    <target name="compile" depends="assert-notinproduction, ejbca-ejb, ejbca-ws-cli, ejbca-xkms-cli, ejbca-ejb-cli, clientToolBox, ejbca-ws">
    	<mkdir dir="${build.dir}" />
        <javac srcdir="${src.dir}" destdir="${build.dir}" debug="on" includeantruntime="no"
        	encoding="iso8859-1" classpathref="systemtests.classpath" target="${java.target.version}">
        	<exclude name="org/ejbca/core/protocol/xkms/**"/>
    	</javac>
        <javac srcdir="${src.dir}" destdir="${build.dir}" debug="on" includeantruntime="no" includejavaruntime="true"
        	encoding="iso8859-1" classpathref="systemtests.classpath" target="${java.target.version}">
        	<include name="org/ejbca/core/protocol/xkms/**" if="xkms.enabled.true"/>
        	<classpath path="${build.dir}"/>
    	</javac>
        <copy file="${log4j.test.file}" tofile="${build.dir}/log4j.xml" failonerror="true"/>
        <!-- jndi.properties needs to be in the classpath, if it exists (not for glassfish) -->
        <copy file="${jndi.properties.file}" todir="${build.dir}" failonerror="false"/>
    </target>

    <target name="assert-notinproduction">
		<fail message="You cannot run system tests in a production environment.">
			<condition>
				<or>
					<equals arg1="${ejbca.productionmode}" arg2="ocsp" casesensitive="false"/>
					<equals arg1="${ejbca.productionmode}" arg2="ca" casesensitive="false"/>
					<equals arg1="${ejbca.productionmode}" arg2="true" casesensitive="false"/>
				</or>
			</condition>
		</fail>
    </target>
	
	<target name="assert-appserverrunning" description="Check that the server is running">
		<echo message="Verifying that the application server is up and running..."/>
		<waitfor maxwait="2" maxwaitunit="second" timeoutproperty="appserver.notrunning.publicweb">
			<http url="http://localhost:${httpserver.pubhttp}/ejbca/index.jsp"/>
		</waitfor>
		<fail message="Please start application server before running this script" if="appserver.notrunning.publicweb"/>	
	</target>

	<target name="assert-appserverrunning-ocsp" description="Check that the server is at least running the OCSP service">
		<echo message="Verifying that the application server is up and running..."/>
		<waitfor maxwait="2" maxwaitunit="second" timeoutproperty="appserver.notrunning.ocsp">
			<http url="http://localhost:${httpserver.pubhttp}/ejbca/publicweb/status/ocsp/"/>
		</waitfor>
		<fail message="Please start application server before running this script" if="appserver.notrunning.ocsp"/>	
	</target>

	<!-- If using antcall you must use inheritrefs="true" in order for not having to call clover-setup every time -->
	<target name="runone-internal" depends="build, assert-appserverrunning-ocsp">
		<fail message="'test.runone' is not set. Example -Dtest.runone=LoggingStressTest" unless="test.runone" />
		<property name="test.runoneexclude" value=""/>
		<fail message="'test.runoneexclude' is not set. Example -Dtest.runoneclude=none" unless="test.runoneexclude" />
		<fail message="'reports.dir' is not set." unless="reports.dir" />
		<delete dir="${reports.dir}" />
		<mkdir dir="${reports.dir}/html"/>
		<mkdir dir="${this.dir}/p12"/>	<!-- Workaround for tests using BatchMakeP12 -->
		<mkdir dir="${build.dir}/conf"/>	<!-- Workaround for tests TestCertificateProfile -->
    	<copy todir="${build.dir}/conf" file="${ejbca.home}/conf/extendedkeyusage.properties" />	<!-- Workaround for tests TestCertificateProfile -->
		<property name="runone-internal.classpath" value="systemtests.classpath"/>	<!-- set a default -->
		<junit printsummary="yes" haltonfailure="no" >
			<classpath>
				<path location="${build.dir}" />
				<path refid="${runone-internal.classpath}" />
				<pathelement path="${clover.jar}"/>
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${build.dir}" includes="**/${test.runone}.class" excludes="**/${test.runoneexclude}.class"/>
			</batchtest>
		</junit>
		<delete dir="${this.dir}/p12" />	<!-- Workaround for tests using BatchMakeP12 -->
	<antcall target="createreport">
		<param name="reports.dir" value="${reports.dir}"/>
	</antcall>
	</target>

	<!-- =================================
          Run most system tests
         ================================= -->
    <target name="run" depends="build, assert-appserverrunning, runws, runxkms" description="Run all system tests, enable CMP TCP to run those tests, set -Dmysql.lib=... to enable Cmp Unid test.">
    	<antcall target="showtime"/>
		<delete dir="${reports.base.dir}/run" />
		<mkdir dir="${reports.base.dir}/run/html"/>
		<mkdir dir="${this.dir}/p12"/>	<!-- Workaround for tests using BatchMakeP12 -->
		<mkdir dir="${build.dir}/conf"/>	<!-- Workaround for tests TestCertificateProfile -->
    	<copy todir="${build.dir}/conf" file="${ejbca.home}/conf/extendedkeyusage.properties" />	<!-- Workaround for tests TestCertificateProfile -->
		<echo message="Checking if the CMP TCP listener is listening on port 127.0.0.1:5587... (will result in additional tests being run)"/>
		<waitfor maxwait="2" maxwaitunit="second" timeoutproperty="cmptcplistener.notrunning">
			<socket server="127.0.0.1" port="5587"/>
		</waitfor>
	    <!-- The CMP unid test requires the mysql.lib property to be set -->
    	<condition property="cmpunid.enabled" value="true">
    		<isset property="mysql.lib"/>
    	</condition>
		<junit printsummary="yes" haltonfailure="no">
			<classpath>
				<path location="${build.dir}" />
				<path refid="systemtests.classpath" />
				<pathelement path="${clover.jar}"/>
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.base.dir}/run">
				<fileset dir="${build.dir}" includes="org/ejbca/core/ejb/ca/caadmin/CAsTest.class"/>
			</batchtest>
			<!-- Tests that require CAsTest to setup CAs -->
			<batchtest fork="yes" todir="${reports.base.dir}/run">
				<fileset dir="${build.dir}" includes="org/ejbca/core/ejb/ca/sign/SignSessionTest.class"/>
			</batchtest>
			<batchtest fork="yes" todir="${reports.base.dir}/run">
				<fileset dir="${build.dir}" includes="org/ejbca/core/ejb/ca/caadmin/RemoveCATest.class"/>
			</batchtest>
			<!-- Most system tests -->
			<batchtest fork="yes" todir="${reports.base.dir}/run">
				<fileset dir="${build.dir}">
					<include name="**/*Test.class" />
					<!-- Tests that require TestCAs to setup CAs -->
					<exclude name="org/ejbca/core/ejb/ca/caadmin/CAsTest.class" />
					<exclude name="org/ejbca/core/ejb/ca/sign/SignSessionTest.class" />
					<exclude name="org/ejbca/core/ejb/ca/caadmin/RemoveCATest.class" />
					<!-- Tests that take a very long time to complete -->
					<exclude name="org/ejbca/core/ejb/ca/sign/SignLotsOfCertsTest.class" />
					<exclude name="org/ejbca/core/ejb/ca/sign/SignLotsOfCertsTest$SignTester.class" />
					<exclude name="org/ejbca/core/ejb/ca/sign/SignLotsOfCertsTest$1.class" />
					<exclude name="org/ejbca/core/ejb/log/LoggingStressTest.class" />
					<exclude name="org/ejbca/core/ejb/log/LoggingStressTest$LogTester.class" />
					<exclude name="org/ejbca/core/ejb/ra/AddLotsofCertsPerUserTest.class" />
					<exclude name="org/ejbca/core/ejb/ra/AddLotsofUsersTest.class" />
					<!-- Tests that require special configuration to work -->
					<exclude name="org/ejbca/ui/web/pub/AutoEnrollServletTest.class" />
					<exclude name="org/ejbca/core/protocol/cmp/CrmfRAPbeMultipleKeyIdRequestTest.class" />
					<exclude name="org/ejbca/core/protocol/ocsp/ProtocolLookupServerHttpTest.class" />
					<exclude name="org/ejbca/core/protocol/ocsp/ProtocolLookupServerHttpTest$SimpleVerifier.class" />
					<exclude name="org/ejbca/core/protocol/ocsp/ProtocolOcspHttpStandaloneTest.class" />
					<exclude name="org/ejbca/core/protocol/ocsp/ProtocolOcspHttpPerfTest.class" />
					<exclude name="org/ejbca/core/protocol/ocsp/ProtocolOcspHttpPerfTest$1.class" />
					<exclude name="org/ejbca/core/protocol/ocsp/ProtocolOcspHttpPerfTest$OcspTester.class" />
                    <exclude name="org/ejbca/ui/cli/OcspMonitoringToolTest.class" />
                    <exclude name="org/ejbca/ejb/GlassfishVerifierReportParserTest.class" />
					<!-- Tests that are unstable and should be corrected or require special configuration -->
					<exclude name="org/ejbca/core/protocol/ocsp/ProtocolOcspSignedHttpTest.class" />
					<exclude name="org/ejbca/ui/web/pub/cluster/WebOcspHealthCheckTest.class"/>
					<!-- Tests that require the CMP TCP listener -->
					<exclude name="org/ejbca/core/protocol/cmp/CrmfRAPbeTcpRequestTest.class" />
					<exclude name="org/ejbca/core/protocol/cmp/CrmfRATcpRequestTest.class" />
					<!-- Tests that require the CMP Unid datahandler -->
					<exclude name="org/ejbca/core/protocol/cmp/CmpRAUnidTest.class" />
					<!-- Tests that require unique index in the database to work -->
					<exclude name="org/ejbca/core/ejb/ca/sign/CustomCertSerialnumberTest.class" />
					<exclude name="org/ejbca/core/protocol/cmp/CrmfRARequestCustomSerialNoTest.class" />
					<!-- Exclude WS, they are run from their own target, runws -->
					<exclude name="**/protocol/ws/*" />
					<!-- Exclude XKMS, they are run from their own target, runxkms -->
					<exclude name="**/XKMS*Test.class" />
				</fileset>
			</batchtest>
			<!-- Tests that require the CMP TCP listener -->
			<batchtest fork="yes" todir="${reports.base.dir}/run" unless="cmptcplistener.notrunning">
				<fileset dir="${build.dir}">
					<include name="org/ejbca/core/protocol/cmp/CrmfRAPbeTcpRequestTest.class" />
					<include name="org/ejbca/core/protocol/cmp/CrmfRATcpRequestTest.class" />
				</fileset>
			</batchtest>
			<!-- Tests that require the CMP Unid data handler -->
			<batchtest fork="yes" todir="${reports.base.dir}/run" if="cmpunid.enabled">
				<fileset dir="${build.dir}">
					<include name="org/ejbca/core/protocol/cmp/CmpRAUnidTest.class" />
				</fileset>
			</batchtest>
		</junit>
		<delete dir="${this.dir}/p12" />	<!-- Workaround for tests using BatchMakeP12 -->
    	<antcall target="createreport">
    		<param name="reports.dir" value="${reports.base.dir}/run"/>
    	</antcall>
    	<antcall target="showtime"/>
    </target>

    <target name="runweb" depends="build, assert-appserverrunning" description="Run web-realted system tests">
    	<antcall target="showtime"/>
		<delete dir="${reports.base.dir}/runweb" />
		<mkdir dir="${reports.base.dir}/runweb/html"/>
		<junit printsummary="yes" haltonfailure="no">
			<classpath>
				<path location="${build.dir}" />
				<path refid="systemtests.classpath" />
				<pathelement path="${clover.jar}"/>
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.base.dir}/runweb">
				<fileset dir="${build.dir}">
                    <include name="org/ejbca/core/protocol/scep/ProtocolScepHttpTest.class" />
                    <include name="org/ejbca/core/protocol/scep/ProtocolOcspHttpTest.class" />
                    <include name="org/ejbca/core/protocol/cmp/CrmfRequestTest.class" />
                    <include name="org/ejbca/core/protocol/cmp/CrmfRARequestTest.class" />
                	<include name="org/ejbca/ui/web/pub/WebdistHttpTest.class" />
                	<include name="org/ejbca/ui/web/pub/CertRequestHttpTest.class" />
                	<include name="org/ejbca/ui/web/pub/WebEjbcaHealthCheckTest.class" />
				</fileset>
			</batchtest>
		</junit>
	<antcall target="createreport">
		<param name="reports.dir" value="${reports.base.dir}/runweb"/>
	</antcall>
    	<antcall target="showtime"/>
    </target>

    <target name="runcmp" depends="build, assert-appserverrunning" description="Run CMP system tests">
    	<antcall target="showtime"/>
		<delete dir="${reports.base.dir}/runcmp" />
		<mkdir dir="${reports.base.dir}/runcmp/html"/>
		<echo message="Checking if the CMP TCP listener is listening on port 127.0.0.1:5587..."/>
		<waitfor maxwait="2" maxwaitunit="second" timeoutproperty="cmptcplistener.notrunning">
			<socket server="127.0.0.1" port="5587"/>
		</waitfor>
    	<fail if="cmptcplistener.notrunning" message="This test requires a running CMP TCP listener"/>
		<junit printsummary="yes" haltonfailure="no">
		    <sysproperty key="httpCmpProxyURL" value="${httpCmpProxyURL}"/>
		    <sysproperty key="tcpCmpProxyIP" value="${tcpCmpProxyIP}"/>
		    <sysproperty key="tcpCmpProxyPort" value="${tcpCmpProxyPort}"/>
		    <classpath>
				<path location="${build.dir}" />
				<path refid="systemtests.classpath" />
				<pathelement path="${clover.jar}"/>
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.base.dir}/runcmp" unless="cmptcplistener.notrunning">
				<fileset dir="${build.dir}">
					<include name="org/ejbca/core/protocol/cmp/CrmfRARequestTest.class" />
					<include name="org/ejbca/core/protocol/cmp/CrmfRAPbeRequestTest.class" />
					<include name="org/ejbca/core/protocol/cmp/CrmfRATcpRequestTest.class" />
					<include name="org/ejbca/core/protocol/cmp/CmpRAUnidTest.class" />
				</fileset>
			</batchtest>
		</junit>
	<antcall target="createreport">
		<param name="reports.dir" value="${reports.base.dir}/runcmp"/>
	</antcall>
    	<antcall target="showtime"/>
    </target>

	<!-- =================================
          Run a single test specified with -Dtest.runone=TestName
         ================================= -->
	<target name="runone" description="Run a single JUnit-test specified -Dtest.runone=classname" unless="test.runone.fileset.notempty">
		<antcall target="runone-internal" inheritrefs="true">
			 <param name="reports.dir" value="${reports.base.dir}/run-one"/>
		</antcall>
	</target>

	<!-- =================================
          Run the log stress test
         ================================= -->
	<target name="runlogstress" description="Run the log stress test (runs for one hour)">
    	<property name="test.runone" value="LoggingStressTest"/>
		<antcall target="runone-internal" inheritrefs="true">
			<param name="reports.dir" value="${reports.base.dir}/runlogstress"/>
		</antcall>
	</target>

	<target name="runws" description="Run Web Services system tests">
		<property name="runone-internal.classpath" value="systemtests.classpath.nojee"/>	<!-- no jee classes for ws tests -->
		<antcall target="runone-internal" inheritrefs="true">
			<param name="reports.dir" value="${reports.base.dir}/runws"/>
			<param name="test.runone" value="protocol/ws/*Test"/>
		</antcall>
	</target>

	<target name="runxkms" description="Run XKMS system tests" if="xkms.enabled.true">
		<!--fail message="xkms is not enabled in conf/xkms.properties." unless="xkms.enabled.true" /-->
		<property name="runone-internal.classpath" value="systemtests.classpath.nojee"/>
		<antcall target="runone-internal" inheritrefs="true">
			<param name="reports.dir" value="${reports.base.dir}/runxkms"/>
	    	<param name="test.runone" value="XKMS*Test"/>
			<!-- Exclude test of broken functionality -->
			<param name="test.runoneexclude" value="org/ejbca/core/protocol/xkms/XKMSSigTest"/>
		</antcall>
	</target>

	<target name="runlotsperuser" description="Run system tests that creates lots of users and certificates for each user">
    	<property name="test.runone" value="AddLotsofCertsPerUserTest"/>
		<antcall target="runone-internal" inheritrefs="true">
			<param name="reports.dir" value="${reports.base.dir}/runlotsperuser"/>
		</antcall>
	</target>

	<target name="runlotsofusers" description="Run system tests that creates lots of users">
    	<property name="test.runone" value="AddLotsofUsersTest"/>
	<antcall target="runone-internal" inheritrefs="true">
		<param name="reports.dir" value="${reports.base.dir}/runlotsperuser"/>
	</antcall>
	</target>

	<target name="runperf" description="Run system tests that creates lots of certificates">
    	<property name="test.runone" value="SignLotsOfCertsTest"/>
	<antcall target="runone-internal" inheritrefs="true">
		<param name="reports.dir" value="${reports.base.dir}/runperf"/>
	</antcall>
	</target>

	<!-- Target that setups a user with cert as required by ProtocolOcspHttpStandaloneTest -->
	<target name="runocsp.setuptest" depends="assert-appserverrunning">
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value="ra adduser ocspTest foo123 CN=ocspTest null AdminCA1 null 1 P12"/>
		</antcall>
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value="ra setuserstatus ocspTest 10"/>
		</antcall>
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value="ra setclearpwd ocspTest foo123"/>
		</antcall>
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value="batch ocspTest"/>
		</antcall>
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value="ra revokeuser ocspTest 0"/>
		</antcall>
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value="ra setuserstatus ocspTest 10"/>
		</antcall>
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value="ra setclearpwd ocspTest foo123"/>
		</antcall>
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value="batch ocspTest"/>
		</antcall>
		<!-- Generate an OCSP signer keystore -->
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value="ra adduser ocspTestSigner foo123 CN=ocspTestSigner null AdminCA1 null 1 P12 OCSPSIGNER"/>
		</antcall>
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value="ra setuserstatus ocspTestSigner 10"/>
		</antcall>
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value="ra setclearpwd ocspTestSigner foo123"/>
		</antcall>
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value="batch ocspTestSigner"/>
		</antcall>
		<mkdir dir="${build.dir}/keys"/>
		<copy file="${ejbca.home}/p12/ocspTestSigner.p12" todir="${build.dir}/keys" failonerror="false"/>
		<echo>
			Configure ocsp.properties:
			 ocsp.defaultresponder=CN=AdminCA1,O=EJBCA Sample,C=SE
			 ocsp.keys.dir=${build.dir}/keys
			 ocsp.keys.storePassword=foo123
			 ocsp.untilNextUpdate=5
			 ocsp.maxAge=4
			and redeploy using 'ant ocsp-deploy'.
		</echo>
		<available file="${build.dir}/keys/ocspTestSigner.p12" property="noOcspTestSigner" />
		<fail unless="noOcspTestSigner" message="Could not batch generate OCSP signing keystore."/>
	</target>

	<target name="runocsp" depends="build, assert-appserverrunning-ocsp">
		<property name="reports.dir" location="${reports.base.dir}/runocsp"/>
		<fail message="'reports.dir' is not set." unless="reports.dir" />
		<delete dir="${reports.dir}" />
		<mkdir dir="${reports.dir}/html"/>
		<echo>
			Hint: For a simple test using the EJBCA database you can use 'ant runocsp.setuptest'
			when EJBCA is deployed in CA mode to setup the database for this test.
		</echo>
		<condition property="runocsp.warning" else=""
			value="WARNING: EJBCA/OCSP must be deployed with ocsp.untilNextUpdate configured for all OCSP tests to succeed.">
			<equals arg1="${ocsp.untilNextUpdate}" arg2="0"/>
		</condition>
		<echo message="${runocsp.warning}"/>
		<junit printsummary="yes" haltonfailure="no" >
			<classpath>
				<path location="${build.dir}" />
				<path refid="systemtests.classpath" />
				<pathelement path="${clover.jar}"/>
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${build.dir}">
					<include name="org/ejbca/core/protocol/ocsp/ProtocolOcspHttpStandaloneTest.class" />
					<include name="org/ejbca/ui/web/pub/cluster/WebOcspHealthCheckTest.class" />
				</fileset>
			</batchtest>
		</junit>
		<antcall target="createreport"/>
	</target>

    <target name="runctb" depends="build, clientToolBox" description="run JUnit ClientToolBox tests">
		<echo message="Use ejbca-custom/dist/clientToolBox/lib for your JDBC driver and ejbca-custom/dist/clientToolBox/properties/META-INF/persistence.xml for your modified database config."/>
    	<property name="reports.dir" location="${reports.base.dir}/ctb"/>
		<delete dir="${reports.dir}" />
		<mkdir dir="${reports.dir}/html"/>
		<junit printsummary="yes" haltonfailure="no">
			<classpath>
				<path location="${build.dir}" />
                <path refid="lib.clientToolBox.classpath" />
				<pathelement path="${clover.jar}"/>
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${build.dir}">
                    <include name="org/ejbca/ui/cli/OcspMonitoringToolTest.class" />
				</fileset>
			</batchtest>
		</junit>
    	<antcall target="createreport"/>
   	</target>

	<target name="rungfver" depends="build">
		<condition property="isglassfish"><matches pattern="glassfish" string="${appserver.type}"/></condition>
    	<property name="reports.dir" location="${reports.base.dir}/gfver"/>
		<delete dir="${reports.dir}" />
		<mkdir dir="${reports.dir}/html"/>
		<exec command="${appserver.home}/bin/verifier" failifexecutionfails="false">
			<arg line="-p -d ${reports.dir} ${ejbca.home}/dist/ejbca.ear"/>
		</exec>
		<junit printsummary="yes" haltonfailure="no">
			<classpath>
				<path location="${build.dir}" />
                <path refid="systemtests.classpath" />
				<pathelement path="${clover.jar}"/>
			</classpath>
			<jvmarg line="-Dvertest.report=${reports.dir}/ejbca.ear.xml -Dvertest.expectedErrors=0 -Dvertest.expectedFailures=3 -Dvertest.expectedWarnings=0"/>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}" if="isglassfish">
				<fileset dir="${build.dir}">
                    <include name="org/ejbca/ejb/GlassfishVerifierReportParserTest.class" />
				</fileset>
			</batchtest>
		</junit>
    	<antcall target="createreport"/>
	</target>

	<target name="rungfver-ocsp" depends="build">
		<condition property="isglassfish"><matches pattern="glassfish" string="${appserver.type}"/></condition>
    	<property name="reports.dir" location="${reports.base.dir}/gfver-ocsp"/>
		<delete dir="${reports.dir}" />
		<mkdir dir="${reports.dir}/html"/>
		<exec command="${appserver.home}/bin/verifier" failifexecutionfails="false">
			<arg line="-p -d ${reports.dir} ${ejbca.home}/ocsp-dist/ejbca.ear"/>
		</exec>
		<junit printsummary="yes" haltonfailure="no">
			<classpath>
				<path location="${build.dir}" />
                <path refid="systemtests.classpath" />
				<pathelement path="${clover.jar}"/>
			</classpath>
			<jvmarg line="-Dvertest.report=${reports.dir}/ejbca.ear.xml -Dvertest.expectedFailures=0"/>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}" if="isglassfish">
				<fileset dir="${build.dir}">
                    <include name="org/ejbca/ejb/GlassfishVerifierReportParserTest.class" />
				</fileset>
			</batchtest>
		</junit>
    	<antcall target="createreport"/>
	</target>

</project>
