<!--
		General purpose build script for web applications and web services,
		including enhanced support for deploying directly to a Tomcat 6
		based server.

		This build script assumes that the source code of your web application
		is organized into the following subdirectories underneath the source
		code directory from which you execute the build script:

		docs	Static documentation files to be copied to
				the "docs" subdirectory of your distribution.

		src		Java source code (and associated resource files)
				to be compiled to the "WEB-INF/classes"
				subdirectory of your web application.

		web		Static HTML, JSP, and other content (such as
				image files), including the WEB-INF subdirectory
				and its configuration file contents.

		$Id: build-http.xml 12411 2011-08-31 08:32:14Z anatom $
-->


<!--	A "project" describes a set of targets that may be requested
		when Ant is executed.	The "default" attribute defines the
		target which is executed if no specific target is requested,
		and the "basedir" attribute defines the current working directory
		from which Ant executes the requested task.	This is normally
		set to the current working directory.
-->

<project name="CMP HTTP Proxy" default="dist" basedir=".">



<!-- ==================== File and Directory Names ======================== -->


<!--

	These properties generally define file and directory names (or paths) that
	affect where the build process stores its outputs.

	thisapp.name				Base name of this application, used to
								construct filenames and directories.
								Defaults to "myapp".

	thisapp.version				Version number of this iteration of the application.

	build.home					The directory into which the "prepare" and
								"compile" targets will generate their output.
								Defaults to "build".

	catalina.home				The directory in which you have installed
								a binary distribution of Tomcat 6.	This will
								be used by the "deploy" target.

	dist.home					The name of the base directory in which
								distribution files are created.
								Defaults to "dist".

-->
	<dirname property="this.dir" file="${ant.file.CMP HTTP Proxy}"/>
	<import file="${this.dir}/../build.xml"/>

	<property environment="env" />
	<property name="thisapp.name"		value="cmpProxy"/>
	<property name="thisapp.version"	value="${app.version.number}"/>
	<property name="build.home"			value="${this.dir}/build-http"/>
	<property name="catalina.home"		value="${env.SERVLET_ENGINE_HOME}"/>
	<property name="dist.home"			value="${mod.cmpHttpProxy.dist}"/>
	<property name="src.home"			value="${this.dir}/src"/>
	<property name="resources.home"		value="${this.dir}/resources"/>
	<property name="web.home"			value="${this.dir}/web"/>


<!-- ==================== Compilation Classpath =========================== -->

	<path id="compile.classpath">

		<!-- Include all elements that Tomcat exposes to applications -->
		<fileset dir="${catalina.home}/bin">
			<include name="*.jar"/>
		</fileset>
		<pathelement location="${catalina.home}/lib"/>
		<fileset dir="${catalina.home}/lib">
			<include name="*.jar"/>
		</fileset>

	</path>
	<path id="cmpHttpProxy.lib.classpath">
		<fileset dir="${ejbca.home}/lib">
			<include name="log4j-1.2.16.jar"/>
			<include name="quickserver/commons-pool.jar"/>
			<include name="commons-collections-3.2.jar"/>
			<include name="commons-configuration-1.6.jar"/>
			<include name="commons-lang-2.5.jar"/>
		</fileset>
	</path>



<!-- ==================== Compilation Control Options ==================== -->

<!--

	These properties control option settings on the Javac compiler when it
	is invoked using the <javac> task.

	compile.debug				Should compilation include the debug option?

	compile.deprecation	Should compilation include the deprecation option?

	compile.optimize		Should compilation include the optimize option?

-->

	<property name="compile.debug" value="true"/>
	<property name="compile.deprecation" value="false"/>
	<property name="compile.optimize" value="true"/>



<!-- ==================== All Target ====================================== -->

<!--

	The "all" target is a shortcut for running the "clean" target followed
	by the "compile" target, to force a complete recompile.

-->

	<target name="all" depends="clean,compile"
	description="Clean build and dist directories, then compile"/>



<!-- ==================== Clean Target ==================================== -->

<!--

	The "clean" target deletes any previous "build" and "dist" directory,
	so that you can be ensured the application can be built from scratch.

-->

	<target name="clean"
	description="Delete old build and dist directories">
		<delete dir="${build.home}"/>
		<delete dir="${dist.home}"/>
	</target>



<!-- ==================== Compile Target ================================== -->

<!--

	The "compile" target transforms source files (from your "src" directory)
	into object files in the appropriate location in the build directory.
	This example assumes that you will be including your classes in an
	unpacked directory hierarchy under "/WEB-INF/classes".

-->

	<target name="compile" depends="prepare"
	description="Compile Java sources">

		<!-- Compile Java classes as necessary -->
		<mkdir dir="${build.home}/WEB-INF/classes"/>
		<javac includeantruntime="yes" destdir="${build.home}/WEB-INF/classes" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}">
			<classpath>
				<path refid="compile.classpath"/>
				<path refid="lib.bouncycastle.classpath"/>
				<path refid="cmpHttpProxy.lib.classpath"/>
			</classpath>
			<src path="${src.home}"/>
			<src path="${mod.ejbca-cmp-tcp.path}/src" />
			<src path="${ejbca.home}/src/java"/>
			<include name="org/ejbca/ui/web/protocol/CmpProxyServlet.java"/>
		</javac>

		<!-- Copy application resources -->
		<copy todir="${build.home}/WEB-INF/classes">
			<fileset dir="${resources.home}/properties"/>
			<fileset dir="${ejbca.home}/src">
				<include name="intresources/**"/>
			</fileset>
			<fileset dir="${ejbca.home}/src/java">
				<include name="dncomponents.properties"/>
				<include name="profilemappings.properties"/>
			</fileset>
		</copy>

	</target>



<!-- ==================== Dist Target ===================================== -->


<!--

	The "dist" target creates a binary distribution of your application
	in a directory structure ready to be archived in a tar.gz or zip file.
	Note that this target depends on:

	*	"compile" so that the entire web application (including external
		dependencies) will have been assembled

-->

	<target name="dist" depends="compile"
	description="Create binary distribution">

		<copy todir="${dist.home}">
			<fileset file="${resources.home}/README"/>
			<fileset file="${resources.home}/JUNIT"/>
			<fileset file="${resources.home}/properties/cmpProxy.properties"/>
		</copy>

		<!-- Create application JAR file -->
		<jar jarfile="${dist.home}/${thisapp.name}-${thisapp.version}.war"
			basedir="${build.home}"/>

		<!-- Copy additional files to ${dist.home} as necessary -->

	</target>



<!-- ==================== Prepare Target ================================== -->

<!--

	The "prepare" target is used to create the "build" destination directory,
	and copy the static contents of your web application to it.	If you need
	to copy static files from external dependencies, you can customize the
	contents of this task.

	Normally, this task is executed indirectly when needed.

-->

	<target name="prepare">

		<!-- Create build directories as needed -->
		<mkdir	dir="${build.home}"/>
		<mkdir	dir="${build.home}/WEB-INF"/>
		<mkdir	dir="${build.home}/WEB-INF/classes"/>


		<!-- Copy static content of this web application -->
		<copy todir="${build.home}">
			<fileset dir="${web.home}"/>
		</copy>

		<!-- Copy external dependencies as required -->
		<!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
		<mkdir	dir="${build.home}/WEB-INF/lib"/>
		<pathconvert property="lib.cmpHttpProxy.classpath.property" pathsep=" ">
			<path refid="cmpHttpProxy.lib.classpath" />
			<map from="${ejbca.home}/" to=""/>
		</pathconvert>
		<copy todir="${build.home}/WEB-INF/lib" flatten="true">
			<fileset dir="${ejbca.home}" includes="${lib.cmpHttpProxy.classpath.property}"/>
			<fileset dir="${ejbca.home}/lib">
				<include name="commons-logging-1.1.1.jar"/>
				<include name="bcprov-jdk16-145.jar"/>
			</fileset>
		</copy>

		<!-- Copy static files from external dependencies as needed -->
		<!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->

	</target>


</project>
