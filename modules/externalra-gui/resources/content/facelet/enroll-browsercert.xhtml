<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/ xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:e="http://ejbca.org"
      xmlns:ice="http://www.icesoft.com/icefaces/component">
<ui:composition template="template/page-template.xhtml">
    <ui:param name="pagetitle" value="enroll.browsercert.title"/>
    <ui:define name="landingcontent">
    	<br/>
    	<ice:outputText value="#{resources['enroll.browsercert.description']}"/>
    	<br/>
		<ice:panelGroup styleClass="top" rendered="#{enrollInterface.messagesPending}">
    		<ice:messages errorStyle="color:red;" layout="table" globalOnly="true" showDetail="false"/>
    	</ice:panelGroup>
		<ice:panelGroup rendered="#{!enrollInterface.internetExplorer and !enrollInterface.downloadAvailable}">
	    	<ice:inputHidden id="dummy" value="exists"/>
			<iframe id="hiddenFrame" name="hiddenFrame" src="about:blank" onload="postCSRConversion()" scrolling="no" style="border: none; height: 0px; width: 0px;"/>
			<script type="text/javascript">
				// <![CDATA[
				function postCSRConversion() {
					if (crypto == null || crypto.version == null) {
						if (window.frames['hiddenFrame'].document.getElementById('keygenResult') != null) {
							document.getElementById('form:certificateRequest').value = window.frames['hiddenFrame'].document.getElementById('keygenResult').value;
							document.getElementById('form:certificateRequestType').value = '2';	// KEYGEN
							document.getElementById('form:submitButton').click();
						} else {
							alert("#{resources['enroll.browsercert.notsupported']}");
						}
					}
				}
					
				function generateRequest() {
					if (crypto != null && crypto.version != null) {
						// Generates CRMF request with FireFox
						crmfObject = crypto.generateCRMFRequest("CN=unused", "unusedPassword", "unusedAuthenticator", null,
							"", #{enrollInterface.keySpec}, null, "rsa-dual-use");
						document.getElementById('form:certificateRequest').value = crmfObject.request;
						document.getElementById('form:certificateRequestType').value = '1';	// CRMF
						return true; 
					} else {
						// Yes! This is ugly, but it works in Safari..
						if (document.getElementById('form:certificateRequestType').value != "2") {
							document.getElementById('form:certificateRequestType').value = "-1";	// Backing bean wont display error messages..
							window.frames['hiddenFrame'].document.writeln('<html><body><form id="keygenForm" action="../keyGenServlet" method="POST">');
							window.frames['hiddenFrame'].document.writeln('<keygen name="keygen" keytype="RSA" challenge="challenge"></keygen></form></body></html>');
							window.frames['hiddenFrame'].document.getElementById('keygenForm').submit();
							return false;
						} else {
							return true;
						}
					}
				}
				// ]]>
			</script> 
	    </ice:panelGroup>
		<ice:panelGroup rendered="#{enrollInterface.internetExplorer and enrollInterface.windowsNT5 and enrollInterface.certificateResponse == ''}">
	    	<object classid="clsid:127698e4-e730-4e5c-a2b1-21490a70c8a1" id="objXenroll" height="0" width="0"></object>
			<ice:panelGroup id="cspsDiv" style="color:red;">
    			<select id="csps" class="iceSelOneMnu"/>
    		</ice:panelGroup>
			<script type="text/javascript">
				//<![CDATA[
				var selectedIndex = -1;
				var count = 0;
				for (providerType=0; providerType<=13; providerType++) {
					var cspIndex = 0;
					document.objXenroll.ProviderType = providerType;
					try {
						// There has to be at least one provider for this type or we move on to the next one
						var providerName = document.objXenroll.EnumProviders(0, 0);
					} catch (e) {
						continue;
					}
					while (true) {
						option = document.createElement("option");
						option.text = providerName;
						option.value = ""+providerType;
						document.getElementById("csps").add(option);	// IE does not use the addition standard argument ",null"
						if (providerName == "Microsoft Base Cryptographic Provider v1.0" && selectedIndex == -1) {
							selectedIndex = count;
						} else if (providerName == "Microsoft Enhanced Cryptographic Provider v1.0") {
							selectedIndex = count;
						}
						cspIndex++;
						try {
							providerName = document.objXenroll.EnumProviders(cspIndex, 0);
						} catch (e) { break; }
						count++;
					}
				}
				if (count == 0) {
					// No CSPs was found
					document.getElementById('form:cspsDiv').innerHTML = "#{resources['enroll.browsercert.runactivex']}";
				} else {
					if (selectedIndex == -1) {
						selectedIndex = 0;
					}
					document.getElementById("csps").selectedIndex = selectedIndex;
				}

				function generateRequest() {
					if (count == 0) {
						return false;
					}
					document.objXenroll.reset();
					document.objXenroll.HashAlgorithm = "MD5";	// WTF!
					document.objXenroll.ProviderName = document.getElementById("csps").text;
					document.objXenroll.ProviderType = document.getElementById("csps").value;
					if (document.objXenroll.ProviderType < 2) {
						document.objXenroll.KeySpec = 1;
					} else {
						document.objXenroll.KeySpec = 2;
					}
					var keySize = #{enrollInterface.keySpec};	// TODO: Read from config via hidden field
					var keyMask = keySize * 65536;
					var exportableKey = #{enrollInterface.exportable};	// 1=true, 0=false
					document.objXenroll.GenKeyFlags = keyMask | 2 | exportableKey;
					document.getElementById('form:certificateRequest').value = document.objXenroll.createPKCS10("CN=ignoredNameUsedInRequest", "");
					document.getElementById('form:certificateRequestType').value = "0";	// PKCS#10
					return true;
				}
				// ]]>
			</script> 
	    </ice:panelGroup>
		<ice:panelGrid rendered="#{enrollInterface.internetExplorer and enrollInterface.windowsNT5 and enrollInterface.certificateResponse != ''}">
	    	<object classid="clsid:127698e4-e730-4e5c-a2b1-21490a70c8a1" id="objXenroll" height="0" width="0"></object>
		    <ice:outputText value="Installing..."/>
	    	<ice:inputHidden id="certificateResponse" value="#{enrollInterface.certificateResponse}"/>
			<script type="text/javascript">
				//<![CDATA[
				document.objXenroll.acceptPKCS7(document.getElementById("form:certificateResponse").value);
				alert("#{resources['enroll.browsercert.newcertinstalled']}");
				window.location.reload();
				// ]]>
			</script> 
	    </ice:panelGrid>
		<ice:panelGrid rendered="#{enrollInterface.internetExplorer and !enrollInterface.windowsNT5 and enrollInterface.certificateResponse == ''}">
	    	<object classid="clsid:884e2049-217d-11da-b2a4-000e7bbb2b09" id="g_objClassFactory" height="0" width="0"/>
			<ice:panelGroup id="cspsDiv2" style="color:red;">
    			<select id="csps" class="iceSelOneMnu"/>
    		</ice:panelGroup>
			<script type="text/javascript">
				//<![CDATA[
				var initOk = false;
				try {
					var g_objCSPInformations = document.g_objClassFactory.CreateObject("X509Enrollment.CCspInformations");
					initOk = true;
				} catch (e) {
					document.getElementById('form:cspsDiv2').innerHTML = "#{resources['enroll.browsercert.allowrun']}";
				}
				function populateCspList() { 
					if (!initOk) {
						return;
					}
					g_objCSPInformations.AddAvailableCsps();

					if (g_objCSPInformations.Count == 0) {
						document.writeln("#{resources['enroll.browsercert.nocsps']}<br/>");
					} else {
						var selectedIndex = -1;
						var count = 0;
						for (cspIndex=0;cspIndex <= g_objCSPInformations.Count;cspIndex++) {
							try {
								// If there isn't any information for this provider we move on to the next one
								var cspInformation = g_objCSPInformations.ItemByIndex(cspIndex)
							} catch (e) {
								continue;
							}
							if (cspInformation.LegacyCsp) {
								if (cspInformation.Name.indexOf("Microsoft Base Cryptographic Provider") != -1 && selectedIndex == -1) {
									selectedIndex = count;
								} else if (cspInformation.Name.indexOf("Microsoft Enhanced Cryptographic Provider") != -1) {
									selectedIndex = count;
								}
								option = document.createElement("option");
								option.text = cspInformation.Name;
								option.value = ""+cspInformation.Type;
								document.getElementById("csps").add(option);	// IE does not use the addition standard argument ",null"
								count++;
							}
						}
						if (selectedIndex == -1) {
							selectedIndex = 0;
						}
						document.getElementById("csps").selectedIndex = selectedIndex;
					}
				}
				populateCspList();

				function generateRequest() {
					if (!initOk) {
						return false;
					}
					var g_objPrivateKey	= document.g_objClassFactory.CreateObject("X509Enrollment.CX509PrivateKey");
					var g_objRequest = document.g_objClassFactory.CreateObject("X509Enrollment.CX509CertificateRequestPkcs10");
					var x500DistinguishedName = document.g_objClassFactory.CreateObject("X509Enrollment.CX500DistinguishedName");
					var g_objEnroll = document.g_objClassFactory.CreateObject("X509Enrollment.CX509Enrollment");
					g_objPrivateKey.ProviderName = document.getElementById("csps").options(document.getElementById("csps").selectedIndex).text;
					g_objPrivateKey.ProviderType = document.getElementById("csps").options(document.getElementById("csps").selectedIndex).value;
					g_objPrivateKey.Length = #{enrollInterface.keySpec};	// TODO: Read from config via hidden field
					if (g_objPrivateKey.ProviderType < 2) {
						g_objPrivateKey.KeySpec = 1;	// X509KeySpec.XCN_AT_KEYEXCHANGE
					} else {
						g_objPrivateKey.KeySpec = 2;	// X509KeySpec.XCN_AT_SIGNATURE
					}
					g_objPrivateKey.MachineContext = false;
					g_objPrivateKey.KeyProtection = 1;	//XCN_NCRYPT_UI_PROTECT_KEY_FLAG = 1
					g_objPrivateKey.ExportPolicy = #{enrollInterface.exportable};	//X509PrivateKeyExportFlags.XCN_NCRYPT_ALLOW_EXPORT_FLAG = 1, 0 to disable
					g_objPrivateKey.Existing = false;
					g_objRequest.InitializeFromPrivateKey(1, g_objPrivateKey, "");	// X509CertificateEnrollmentContext.ContextUser = 1
					x500DistinguishedName.Encode("CN=ignoredNameUsedInRequest", 0);	// X500NameFlags.XCN_CERT_NAME_STR_NONE = 0
					g_objRequest.Subject = x500DistinguishedName;
					var cspInformation = g_objCSPInformations.ItemByName(g_objPrivateKey.ProviderName);
					var cspAlgorithms = cspInformation.CspAlgorithms;
					var nBestIndex = -1;
					for (i=0;i<cspAlgorithms.Count;i++) {
						if (cspAlgorithms.ItemByIndex(i).Name.indexOf("sha1") != -1) {
							nBestIndex = i;
						} else if (cspAlgorithms.ItemByIndex(i).Name.indexOf("md5") != -1 && nBestIndex == -1) {
							nBestIndex = i;
						}
					}
					var cspAlgorithm = cspAlgorithms.ItemByIndex(nBestIndex);
					if (cspAlgorithm.Type == 2) {	// XCN_CRYPT_HASH_INTERFACE = 2
						g_objRequest.HashAlgorithm = cspAlgorithm.GetAlgorithmOid(0, 0);	// AlgorithmFlagsNone = 0
					}
					g_objEnroll.InitializeFromRequest(g_objRequest);
					var req = g_objEnroll.CreateRequest(3);	// CRYPT_STRING_BASE64REQUESTHEADER = 3
					document.getElementById('form:certificateRequest').value = req;
					document.getElementById('form:certificateRequestType').value = "0";	// PKCS#10
					return true;
				}

				// This is pretty retarded, but this can be run even though it isn't rendered at the same time as the calling link is..
				function installEntityCertificate() {
					try {
						var g_objEnroll2 = document.g_objClassFactory2.CreateObject("X509Enrollment.CX509Enrollment");
						g_objEnroll2.Initialize(1);	//EnrollmentContext UserContext
						// InstallResponseRestrictionFlags.AllowUntrustedRoot=4, InstallResponseRestrictionFlags.AllowNone=0, XCN_CRYPT_STRING_BASE64_ANY=6, document.getElementById("form:certificateResponse").value
						g_objEnroll2.InstallResponse(0, document.getElementById("form:certificateResponse").value, 1, "");
						//Cant do this here so it's added on the server side instead: document.getElementById("form:downloadLinkDiv2").innerHTML = "Installed.";
						document.getElementById("form:certificateInstalled").value = "true";
						return true; 
					} catch (e) {
						if (e.number == -2146762487) {
							// Ignore: The user should follow the instructions shown
							alert("#{resources['enroll.browsercert.trustissue']}");
						} else {
							alert(e.message + " number: " + e.number);
						}
					}
					return false;
				}
				// ]]>
			</script> 
	    </ice:panelGrid>
		<ice:panelGrid rendered="#{enrollInterface.internetExplorer and !enrollInterface.windowsNT5 and enrollInterface.certificateResponse != ''}">
	    	<object classid="clsid:884e2049-217d-11da-b2a4-000e7bbb2b09" id="g_objClassFactory2" height="0" width="0"/>
	    	<ice:inputHidden id="certificateResponse" value="#{enrollInterface.certificateResponse}"/>
	    	<ice:inputHidden id="certificateInstalled" value="false"/>
			<script type="text/javascript">
				//<![CDATA[
				if (installEntityCertificate()) {
					document.getElementById("form:downloadLinkDiv2").innerHTML = "#{resources['enroll.browsercert.newcertinstalled']}";
				}
				// ]]>
			</script> 
			<ice:panelGroup id="downloadLinkDiv2">
			   	<ice:outputResource id="downloadLink2" resource="#{enrollInterface.resource}" mimeType="#{enrollInterface.mimeType}"
			   		attachment="true" label="1. Download, open and install CA certificate in Trusted Certificate Authority store." taget="new"/>
    			<ice:commandLink style="float: left" type="submit" value="2. Install entity certificate" action="#{enrollInterface.removeLinks}"
    				onclick="installEntityCertificate();"/>
			</ice:panelGroup>
	    </ice:panelGrid>
		<ice:panelGrid styleClass="top" columns="2" rendered="#{enrollInterface.certificateResponseType eq null}">
			<ice:panelGroup>
		    	<ice:outputLabel value="#{resources['enroll.username']}:"/>
			</ice:panelGroup>
			<ice:panelGroup>
   				<ice:inputText id="username" value="#{enrollInterface.username}" required="true">
   					<f:validateLength minimum="1"/>
   				</ice:inputText>
				<ice:message style="color: red;" for="username"/>
			</ice:panelGroup>
			<ice:panelGroup>
    			<ice:outputLabel value="#{resources['enroll.password']}:"/>
			</ice:panelGroup>
			<ice:panelGroup>
		    	<ice:inputSecret id="secretPassword" value="#{enrollInterface.password}" required="true" redisplay="true" rendered="#{!enrollInterface.showPassword}">
		    		<f:validateLength minimum="1"/>
		    	</ice:inputSecret>
				<ice:message style="color: red;" for="secretPassword"/>
		    	<ice:inputText id="clearPassword" value="#{enrollInterface.password}" required="true" rendered="#{enrollInterface.showPassword}">
		    		<f:validateLength minimum="1"/>
		    	</ice:inputText>
				<ice:message style="color: red;" for="clearPassword"/>
			</ice:panelGroup>
			<ice:panelGroup>
		    	<ice:outputLabel value="#{resources['enroll.showPassword']}"/>
			</ice:panelGroup>
			<ice:panelGroup>
		    	<ice:selectBooleanCheckbox value="#{enrollInterface.showPassword}"/>
			</ice:panelGroup>
			<ice:panelGroup>
			</ice:panelGroup>
			<ice:panelGroup>
				<ice:inputHidden id="certificateRequest" value="#{enrollInterface.certificateRequest}" required="true"/>
				<ice:inputHidden id="certificateRequestType" value="#{enrollInterface.certificateRequestType}" required="true"/>
    			<ice:commandButton id="submitButton" style="float: left" type="submit" value="#{resources['enroll.csrcert.request']}" action="#{enrollInterface.createCertFromBrowser}"
    				onclick="generateRequest();"/>                        
			</ice:panelGroup>
		</ice:panelGrid>
		<ice:panelGrid styleClass="top" columns="1" rendered="#{enrollInterface.downloadAvailable and !enrollInterface.internetExplorer}">
			<ice:panelGroup id="downloadLinkDiv">
			   	<ice:outputResource id="downloadLink" resource="#{enrollInterface.resource}" mimeType="#{enrollInterface.mimeType}"
			   		attachment="true" label="#{resources['enroll.browsercert.download']}"/>
			</ice:panelGroup>
			<iframe id="hiddenDownloadFrame" name="hiddenDownloadFrame" src="about:blank" scrolling="no" style="border: none; height: 0px; width: 0px;"/>
			<script type="text/javascript">
				// Send the user's browsers to download the cert
				window.frames['hiddenDownloadFrame'].location = document.getElementById('form:downloadLink').href;
			</script> 
		</ice:panelGrid>

    </ui:define>
</ui:composition>

</html>