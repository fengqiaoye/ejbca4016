<?xml version="1.0" encoding="UTF-8"?>
<project name="externalra-scep" default="build">
    <description>
            The EJBCA External RA SCEP client
    </description>

	<dirname property="this.dir" file="${ant.file.externalra-scep}"/>
	<import file="${this.dir}/../build.xml"/>
	
	<property name="build.dir" location="${this.dir}/build"/>
	<property name="build-test.dir" location="${this.dir}/build-test"/>
	<property name="src.dir" location="${this.dir}/src"/>
	<property name="src-test.dir" location="${this.dir}/src-test"/>
	<property name="reports.base.dir" location="${this.dir}/build-test/reports/"/>
	<property name="resources.dir" location="${this.dir}/resources"/>

	<path id="bundle.classpath">
		<path refid="lib.bouncycastle-provonly.classpath"/>
		<path refid="lib.bouncycastle-mailonly.classpath"/>
		<path refid="lib.cert-cvc.classpath"/>
		<path location="${mod.ejbca-util.lib}" />
		<path location="${mod.externalra.lib}" />
		<path refid="lib.commons-lang.classpath"/>
		<path refid="lib.commons-config.classpath"/>
		<!-- Hibernate's JPA libs are handled separately -->
	</path>

	<path id="compile.classpath">
		<path refid="bundle.classpath"/>
		<path refid="lib.log4j.classpath"/>
		<path refid="lib.servlet.classpath"/>
		<path refid="lib.jpa.classpath"/>
	</path>

	<path id="test.classpath">
		<path refid="compile.classpath"/>
		<path location="${build-test.dir}" />
		<path refid="lib.commons-logging.classpath"/>
		<path refid="lib.commons-collections.classpath"/>
		<path refid="lib.junit.classpath"/>
	</path>

    <target name="build" description="Build this module" depends="compile, setup-database-mapping-file">
    	<dirname file="${mod.externalra-scep.war}" property="mod.externalra-scep.war.dir"/>
    	<mkdir dir="${mod.externalra-scep.war.dir}" />
    	<pathconvert property="bundle.classpath.property" pathsep=" ">
    	    <path refid="bundle.classpath" />
    		<map from="${ejbca.home}/" to=""/>
    	</pathconvert>
    	<mkdir dir="${build.dir}/lib-temp" />
    	<copy todir="${build.dir}/lib-temp" flatten="true">
    		<fileset dir="${ejbca.home}" includes="${bundle.classpath.property}"/>
    	</copy>
    	<antcall target="bundle-hibernate-jpa"/>
		<war destfile="${mod.externalra-scep.war}" webxml="${resources.dir}/web.xml">
	        <zipfileset id="libs" prefix="WEB-INF/lib" dir="${build.dir}/lib-temp" includes="**"/>
   			<fileset dir="${build.dir}">
				<include name="WEB-INF/classes/META-INF/*.*"/>
    		</fileset>
			<classes dir="${build.dir}">
				<include name="**/*.class"/>
			</classes>
   			<zipfileset prefix="WEB-INF/classes" dir="${ejbca.home}/conf" includes="scep.properties"/>
	        <zipfileset prefix="WEB-INF" dir="${resources.dir}" includes="jboss-classloading.xml"/>
		</war>
    </target>
	
	<target name="bundle-hibernate-jpa" if="bundle-hibernate-jpa">
		<echo message="Appserver type is ${appserver.type} - bundling Hibernate JPA libraries in WAR. (${bundle-hibernate-jpa})"/>
    	<pathconvert property="bundle-jpa.classpath.property" pathsep=" ">
    	    <path refid="lib.jpa.classpath" />
    		<map from="${ejbca.home}/" to=""/>
    	</pathconvert>
    	<copy todir="${build.dir}/lib-temp" flatten="true">
    		<fileset dir="${ejbca.home}" includes="${bundle-jpa.classpath.property}"/>
    	</copy>
	</target>

    <target name="clean" description="Clean up this module">
		<delete dir="${build.dir}" />
		<delete dir="${build-test.dir}" />
		<delete file="${mod.externalra-scep.war}" />
    </target>
	
    <target name="compile" depends="ejbca-util, externalra-library">
    	<mkdir dir="${build.dir}" />
        <javac srcdir="${src.dir}" destdir="${build.dir}" debug="on" includeantruntime="no"
        	encoding="iso8859-1" target="${java.target.version}" classpathref="compile.classpath"/>
    </target>

    <target name="compile-tests" depends="build">
    	<mkdir dir="${build-test.dir}" />
        <javac srcdir="${src-test.dir}" destdir="${build-test.dir}" debug="on" includeantruntime="no"
        	encoding="iso8859-1" target="${java.target.version}">
        	<classpath>
        		<path refid="compile.classpath"/>
        		<path refid="lib.junit.classpath"/>
        	</classpath>
    	</javac>
    </target>

	<target name="test" depends="compile-tests" description="Run tests for this module">
    	<antcall target="showtime"/>
    	<property name="reports.dir" location="${reports.base.dir}/test"/>
		<delete dir="${reports.dir}" />
		<mkdir dir="${reports.dir}/html"/>
        <copy file="${log4j.test.file}" tofile="${build-test.dir}/log4j.xml" failonerror="true"/>
		<junit printsummary="yes" haltonfailure="no" dir="${this.dir}">
			<classpath>
        		<path refid="test.classpath"/>
				<pathelement path="${clover.jar}"/>
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${build-test.dir}" includes="**/*Test.class">
				</fileset>
			</batchtest>
		</junit>
		<antcall target="createreport"/>
    	<antcall target="showtime"/>
    </target>
	
	<target name="setuptest" depends="ejbca-ejb-cli,assert-appserverrunning" description="Run this on the EJBCA installation once to create a ScepCA and keystore required by the tests.">
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value='ca init ScepCA "CN=Scep CA,O=EJBCA Sample,C=SE" soft null 2048 RSA 3600 null SHA1WithRSA null -1688117755'/>
		</antcall>
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value='ra adduser sceprakeystore foo123 "CN=Scep RA,O=PrimeKey,C=SE" null ScepCA null 1 P12'/>
		</antcall>
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value="ra setclearpwd sceprakeystore foo123"/>
		</antcall>
		<antcall target="ejbca-cli">
			<param name="ejbca-cli.arg" value="batch sceprakeystore"/>
		</antcall>
		<echo>
			Copy the generated keystore ${ejbca.home}/p12/sceprakeystore.p12 to the External Scep RA server before running the tests.
		</echo>
	</target>

	<target name="assert-appserverrunning" description="Check that the server is running">
		<echo message="Verifying that the application server is up and running..."/>
		<waitfor maxwait="2" maxwaitunit="second" timeoutproperty="appserver.notrunning.publicweb">
			<http url="http://localhost:${httpserver.pubhttp}/ejbca/index.jsp"/>
		</waitfor>
		<fail message="Please start application server before running this script" if="appserver.notrunning.publicweb"/>	
	</target>

	<target name="setup-database-mapping-file" >
    	<!-- See https://www.hibernate.org/hib_docs/v3/api/org/hibernate/dialect/package-summary.html -->
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect"><matches pattern="jdbc:mysql:" string="${scep.ra.datasource.jdbc-url}"/></condition>
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect"><matches pattern="jdbc:postgresql:" string="${scep.ra.datasource.jdbc-url}"/></condition>
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect"><matches pattern="jdbc:hsqldb:" string="${scep.ra.datasource.jdbc-url}"/></condition>
    	<condition property="driver-class" value="com.mysql.jdbc.Driver"><matches pattern="jdbc:mysql:" string="${scep.ra.datasource.jdbc-url}"/></condition>
    	<condition property="driver-class" value="org.postgresql.Driver"><matches pattern="jdbc:postgresql:" string="${scep.ra.datasource.jdbc-url}"/></condition>
    	<condition property="driver-class" value="org.hsqldb.jdbcDriver"><matches pattern="jdbc:hsqldb:" string="${scep.ra.datasource.jdbc-url}"/></condition>
    	<fail message="Unsupported database with JDBC URL '${scep.ra.datasource.jdbc-url}'." unless="driver-class"/>
		<mkdir dir="${build.dir}/WEB-INF/classes/META-INF"/>
    	<copy tofile="${build.dir}/WEB-INF/classes/META-INF/persistence.xml" file="${resources.dir}/persistence.xml" overwrite="true">
    		<filterchain>
				<expandproperties/>
    		</filterchain>
    	</copy>
    	<mkdir dir="${mod.externalra-datasources.dist}"/>
    	<copy todir="${mod.externalra-datasources.dist}" file="${resources.dir}/ramessage-ds.xml" overwrite="true">
    		<filterchain>
    			<expandproperties/>
    		</filterchain>
    	</copy>
    </target>

</project>
